# Source: https://stackoverflow.com/questions/9729968/python-implementation-of-viterbi-algorithm checked 05th Oct
# 2023 - adapted
import numpy as np
import torch


class Viterbi:
    """
            Return the MAP estimate of state trajectory of Hidden Markov Model.
            Creates an object with containing the best bath.

            Inputs: ---------- A : array (K, K) State transition matrix. See HiddenMarkovModel.state_transition  for
            details. Example: [[1->1, 1->2],[2->1, 2->2]] P: array(T, K) Probability of being of state k given
            observation in time t - calculated via DNN. Example: [[Prob. of 0.3 to be in state 1 at time 0 given the
            data, Prob of 0.7 to be in state 2 at t = 0], [prob of 0.4 for state 1 at time 1, prob of 0.6 for state 2
            at time 2]] Pi: optional, (K,) Initial state probabilities: Pi[i] is the probability x[0] == i. If None,
            uniform initial distribution is assumed (Pi[:] == 1/K). logscale: optional, (bool) Defines whether the
            calculation is logarithmic or not. Default is False; if true, T1 will contain logarithmic probabilities



            Calculates: ------- x : array (T,) Maximum a posteriori probability estimate of hidden state trajectory,
            conditioned on observation sequence y under the model parameters A, B, Pi. Example: [0 0 1] means that
            the most likely a posteriori path is state 0, state 0, state 1 T1: array (K, T) the probability of the
            most likely path so far Example: [[0.3     0.084   0.00588] [0.04    0.027   0.01512]] means prob. of 0.3
            to be in State 0 at time 0 and  prob. of 0.04 to be in Staate 1 at t=0;  prob. of 0.084 to be in State 0
            at t=1, (c.f. T2 to find the most likely path to get there); prob of 0.027 to be in State 1 at time t=1 (
            c.f. T2 to find the most likely path to get there) the x_j-1 of the most likely path so far
    """

    def __init__(self, A, P, Pi=None, logscale=True, alpha=None, return_log=None, print_info=True, softmax=False,
                 FMMIE=False, labels=None, k_best=1):
        # check if the input is a torch tensor or a numpy array
        if torch.is_tensor(A):
            self.is_torch = True
            self.device = A.device
        else:
            self.is_torch = False

        # Initialize the model given the parameters
        self.A = A
        # self.A[A<0] = 0
        self.P = P
        self.logscale = logscale
        self.print_info = print_info
        self.softmax = softmax
        self.labels = labels
        self.k_best = k_best

        # Initialize the return_log variable
        if return_log is None:
            self.return_log = self.logscale
        else:
            self.return_log = return_log

        # Cardinality of the state space
        self.K = A.shape[0]
        # Initialize the priors with default (uniform dist) if not given by caller
        if self.is_torch:
            self.Pi = Pi if Pi is not None else torch.full(size=(self.K,), fill_value=1 / self.K, device=self.device)
        else:
            self.Pi = Pi if Pi is not None else np.full(self.K, 1 / self.K)

        self.alpha = self.alpha(alpha)

        if self.k_best > 1:
            if self.logscale is False or self.is_torch is False or self.softmax is True:
                raise NotImplementedError
        elif self.softmax and not self.is_torch:
            raise NotImplementedError

        self.T = len(P)
        # convert to logscale if needed
        if self.logscale:  # convert to logscale
            if self.is_torch:
                self.A = torch.log(self.A)
                self.P = torch.log(self.P)
                self.Pi = torch.log(self.Pi)
            else:
                self.A = np.log(self.A)
                self.P = np.log(self.P)
                self.Pi = np.log(self.Pi)

        if FMMIE:
            self.num, self.den = self.calc_FMMIE()
        elif self.is_torch:
            if k_best > 1:
                self.x, self.T1, self.T2, self.T3, self.y = self.calc_viterbi_k_best()
            else:
                self.x, self.T1, self.T2, self.T3, self.y = self.calc_viterbi()
        else:
            self.x, self.T1, self.T2 = self.calc_viterbi()

    # check if alpha is None and set it to 0.5 if it is
    def alpha(self, alpha):
        if alpha is None:
            if self.is_torch:
                return torch.tensor([1.0], dtype=torch.float64, device=self.device)
            else:
                return 1.0
        elif self.logscale is False:
            if self.print_info:
                print("[INFO]: Specifying alpha with logscale = False is not implemented. Logscale is set to True.")
            self.logscale = True
            return alpha
        else:
            return alpha

    # Calculate the most likely state trajectory using the Viterbi algorithm
    def calc_viterbi(self):

        # Initialize the tracking tables
        if self.is_torch:
            T1 = torch.empty((self.K, self.T), dtype=torch.float64, device=self.device)
            T2 = torch.empty((self.K, self.T), dtype=torch.int, device=self.device)
            if self.softmax:
                T3 = torch.zeros((self.K, self.T), dtype=torch.float64, device=self.device)
        else:
            T1 = np.empty((self.K, self.T), 'd')
            T2 = np.empty((self.K, self.T), 'B')

        if self.logscale:
            T1[:, 0] = self.Pi + self.P[0]

        else:
            T1[:, 0] = self.Pi * self.P[0]

        T2[:, 0] = 0

        # Iterate through the observations updating the tracking tables
        for i in range(1, self.T):
            if self.logscale:
                if self.is_torch:
                    T1[:, i] = torch.max(T1[:, i - 1] + self.alpha * self.A.T, 1).values + self.P[i]
                    T2[:, i] = torch.argmax(T1[:, i - 1] + self.alpha * self.A.T, 1)
                    if self.softmax:
                        temp = torch.nn.functional.softmax(T1[:, i - 1] + self.alpha * self.A.T, 1)
                        T3[:, i] = torch.matmul(temp, torch.arange(self.K, dtype=torch.float64)[:, None]).squeeze(1)

                else:
                    T1[:, i] = np.max(T1[:, i - 1] + self.alpha * self.A.T, 1) + self.P[i]
                    T2[:, i] = np.argmax(T1[:, i - 1] + self.alpha * self.A.T, 1)

            else:
                if self.is_torch:
                    T1[:, i] = torch.max(T1[:, i - 1] * self.A.T, 1).values * self.P[i]
                    T2[:, i] = torch.argmax(T1[:, i - 1] * self.A.T, 1)
                else:
                    T1[:, i] = np.max(T1[:, i - 1] * self.A.T, 1) * self.P[i]

                    T2[:, i] = np.argmax(T1[:, i - 1] * self.A.T, 1)

        # Build the output, optimal model trajectory
        if self.is_torch:
            x = torch.empty(self.T, dtype=torch.int64, device=self.device)

            x[-1] = torch.argmax(T1[:, self.T - 1])

            if self.softmax:
                y = torch.empty(self.T, dtype=torch.float64, device=self.device)
                temp = torch.nn.functional.softmax(T1[:, self.T - 1], dim=0)
                y[-1] = torch.matmul(temp, torch.arange(self.K, dtype=torch.float64)[:, None])
            else:
                T3, y = None, None
        else:
            x = np.empty(self.T, 'B')
            x[-1] = np.argmax(T1[:, self.T - 1])

        for i in reversed(range(1, self.T)):
            x[i - 1] = T2[x[i], i]
            if self.is_torch and self.softmax:
                y[i - 1] = T3[x[i], i]

        if self.logscale != self.return_log:
            if self.return_log:
                if self.is_torch:
                    T1 = torch.log(T1)
                else:
                    T1 = np.log(T1)
            else:
                if self.is_torch:
                    T1 = torch.exp(T1)
                else:
                    T1 = np.exp(T1)

        if self.is_torch:
            return x, T1, T2, T3, y
        else:
            return x, T1, T2

    def calc_viterbi_k_best(self):
        T1 = torch.full((self.k_best, self.K, self.T), fill_value=float('-inf'), dtype=torch.float64,device=self.device)
        T2 = torch.full((self.k_best, self.K, self.T, 2), fill_value=-1, dtype=torch.int, device=self.device)

        T1[0, :, 0] = self.Pi + self.P[0]
        T2[0, :, 0] = 0


        for i in range(1, self.T):
            temp = T1[:, :, i - 1] + self.alpha * self.A.T[:, None]
            flattened_vals, flattened_idx = torch.topk(temp.flatten(start_dim=1, end_dim=2), self.k_best)
            T1[:, :, i] = flattened_vals.T + self.P[i]
            unraveled = np.array(np.unravel_index(flattened_idx.numpy(), shape=(self.k_best, self.K))).T
            T2[:, :, i, :] = torch.tensor(unraveled)

        x = torch.empty((self.k_best, self.T), dtype=torch.int64, device=self.device)
        final_vals, final_idx = torch.topk((T1[:, :, -1]).flatten(), self.k_best)
        final_state = final_idx % self.K
        k_prev = final_idx // self.K
        x[:, -1] = final_state

        for i in reversed(range(1, self.T)):
            x[:,i-1] = T2[k_prev, x[:,i], i, 1]
            k_prev = T2[k_prev, x[:,i], i, 0]

        """Steffen = [str('')] * 20
        Steffen[0] = str(

        Steffen[1] = str(

        Steffen[2] = str(

        Steffen[3] = str(

        Steffen[4] = str(

        Steffen[5] = str(

        Steffen[6] = str(

        Steffen[7] = str(

        Steffen[8] = str(

        Steffen[9] = str(

        Steffen[10] = str(

        Steffen[11] = str(

        Steffen[12] = str(

        Steffen[13] = str(

        Steffen[14] = str(

        Steffen[15] = str(

        Steffen[16] = str(

        Steffen[17] = str(

        Steffen[18] = str(

        Steffen[19] = str(
            '00000000000000000000000000000000000000000000000000000000001111111110011111111111111111111111112222222222222222222222222222221112222222222222333333333333333333333333333332222222222222222222222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333301112222222222222222222222222222333322222222223333333223222224444444444444444444444444444444441122222222222222222222222222222222222222222222222222222223322222222223332222222222222222322222222222222222222244444444444444444122222222222222222222222224444444444444444411111111222222222222222222222222222222222222222222222233222222222222222222222222222222223301122222222222222222222222224444444444444444444444444444444444444444444444444444444222244444444444444444444444112222222222222222222222222222222222222222222222222232222222222222222222222222222222222444444444444444444444444444444444441111112222222222221222222222222222222222001111122222222222112222222222222111222222222200011000000000000000000000000000000000000000000000000000000000000000000000')
        x = x.numpy()
        for j in range(len(Steffen)):
            Meins = str('')
            for i in range(len(x[j])):
                Meins += str(x[j][i])
            print("Ist es richtig beim Pfad Nr" + str(j) + "?" + str(Meins == Steffen[j]))
            print(f'Meine Länge: {len(Meins)}, Steffens Länge: {len(Steffen[j])}')"""

        return x, T1, T2, None, None




    """#observations: normal = 0, cold = 1, dizzy = 2 #states: Healthy = 0, Fever = 1 #y = np.array([0, 1, 
    2]) #observation state sequence; expl.: observations are normal(0) then cold (1) then dizzy (2) A = np.array([[
    0.7, 0.3], [0.9, 0.1]]) #state transition matrix: e.g. prob of 0.7 to transition from Healthy to Healthy, 
    # prob of 0.3 to transition from healthy to fever #B = np.array([[0.5, 0.4, 0.1],[0.1, 0.3, 0.6]]) #Emission 
    matrix: e.g. prob of 0.5 to feel normal if you're healthy, # prob of 0.4 to feel cold when healthy Pi = np.array(
    [0.8, 0.2]) #initial distribution, expl.: prob. of 0.6 to start healthy, prob of 0.4 to start ill P = np.array([[
    .5, .5], [0.2, 0.8], [0.4, 0.6]]) #e.g. DNN has calculated that - given the data - there's a 30% chance # that 
    the first state is Healthy (shape 3,2)"""

    def calc_FMMIE(self):
        # zuerst alles in Numpy
        if not self.logscale:
            raise NotImplementedError
        if self.logscale and not self.is_torch:
            # numerator:
            num = self.Pi[self.labels[0]] + np.sum(self.P[np.arange(len(self.labels)), self.labels])
            transitions = np.zeros((self.K, self.K))
            for i in range(len(self.labels) - 1):
                transitions[self.labels[i], self.labels[i + 1]] += 1
            num += self.alpha * (transitions * self.A).sum()

            # denumerator:
            # ...

        if self.logscale and self.is_torch:
            num = self.Pi[self.labels[0]] + torch.sum(self.P[torch.arange(len(self.labels)), self.labels])
            transitions = torch.zeros((self.K, self.K), device=self.device)
            for i in range(len(self.labels) - 1):
                transitions[self.labels[i], self.labels[i + 1]] += 1
            num = num + self.alpha * (transitions * self.A).sum()
        den = 0
        print("Numerator: ", num)
        return num, den


def main():
    A = np.array([[0.7, 0.3], [0.9, 0.1]])
    Pi = np.array([0.8, 0.2])
    P = np.array([[0.1, .9], [0.9, 0.1], [0.01, 0.99]])
    labels = np.array([1, 0, 1])
    alpha = 1

    AT = torch.from_numpy(A).to(dtype=torch.float64)
    AT.requires_grad = True
    PiT = torch.from_numpy(Pi).to(dtype=torch.float64)
    PT = torch.from_numpy(P).to(dtype=torch.float64)
    labelsT = torch.from_numpy(labels).to(dtype=torch.int64)
    alphaT = torch.tensor([1], dtype=torch.float64, requires_grad=True)


    # Viterbi3 = Viterbi(A, P, Pi, logscale=True, alpha=alpha, labels=labelsT, FMMIE=True)

    A1 = torch.from_numpy(A).to(dtype=torch.float64, device='cpu')
    Pi1 = torch.from_numpy(Pi).to(dtype=torch.float64, device='cpu')
    P1 = torch.from_numpy(P).to(dtype=torch.float64, device='cpu')


    Viterbi_2 = Viterbi(A1, P1, Pi1, logscale=True, return_log=True, k_best=2)
    Viterbi_1 = Viterbi(A, P, Pi, logscale=True, return_log=True, alpha=1, k_best=1)
    x_1, T1_1, T2_1 = Viterbi_1.x, Viterbi_1.T1, Viterbi_1.T2
    x_2, T1_2, T2_2 = Viterbi_2.x.numpy(), Viterbi_2.T1.numpy(), Viterbi_2.T2.numpy()

    print(x_1 == x_2, np.round(T1_1, 4) == np.round(T1_2, 4), T2_1 == T2_2)
    print(T2_1)
    print(T2_2)

    # ohne das 2* unterscheiden sich T1 und T2, je nachdem ob in logscale oder nicht gerechnet wird? Oder falsch implementiert? """

if __name__ == "__main__":
    main()
